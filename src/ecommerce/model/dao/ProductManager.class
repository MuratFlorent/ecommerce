<?php

    namespace ecommerce\model\dao;

    use ecommerce\model\Category;
    use ecommerce\model\Product;

    /**
     * Class ProductManager.
     * Manage all product operations.
     *
     * @package ecommerce\model\dao
     */
    class ProductManager
    {
        /**
         * Convert a product array into a product object.
         *
         * @param array $aProduct product.
         *
         * @return Product converted product.
         */
        private static function convertToObject($aProduct)
        {
            $oProduct = new Product();
            $oProduct->setId(intval($aProduct['id']));
            $oProduct->setName($aProduct['name']);
            $oProduct->setDescription($aProduct['description']);
            $oProduct->setImage($aProduct['image']);
            $oProduct->setPrice(floatval($aProduct['price']));
            return $oProduct;
        }

        /**
         * Get a product from its id.
         *
         * @param int $iId product id.
         *
         * @return Product matched product, null if not found
         */
        public static function get($iId)
        {
            $sQuery = 'select * from product where id = ' . $iId . ' limit 1';
            $aProductRow = DBOperation::getOne($sQuery);
            $oProduct = null;
            if (false !== $aProductRow) {
                $oProduct = self::convertToObject($aProductRow);
            }
            return $oProduct;
        }

        /**
         * Get $iLimit random products.
         *
         * @param int $iLimit limit to get
         *
         * @return array(Product) random products.
         */
        public static function getRandom($iLimit)
        {
            $sQuery = 'select * from product order by rand() limit ' . $iLimit;
            $aProducts = array();
            foreach (DBOperation::getAll($sQuery) as $aProduct) {
                $aProducts[] = self::convertToObject($aProduct);
            }

            // TODO remove
            if (count($aProducts) < $iLimit) {
                $iMaxSteps = $iLimit - count($aProducts);
                for ($iStep = 1; $iStep <= $iMaxSteps; $iStep++) {
                    $aProducts[] = $aProducts[0];
                }
            }
            return $aProducts;
        }

        /**
         * Get $iLimit products from the category.
         *
         * @param Category $oCategory category.
         * @param int      $iLimit    limit to get
         *
         * @return array(Product) products from categories.
         */
        public static function getAllFromCategory(Category $oCategory, $iLimit)
        {
            $sQuery = 'select * from product p, product_category pc ';
            $sQuery .= ' where pc.product_id = p.id';
            $sQuery .= ' and pc.category_id = ' . $oCategory->getId();
            $sQuery .= ' limit ' . $iLimit;
            $aProducts = array();
            foreach (DBOperation::getAll($sQuery) as $aProduct) {
                $aProducts[] = self::convertToObject($aProduct);
            }

            // TODO remove
            if (count($aProducts) < $iLimit) {
                $iMaxSteps = $iLimit - count($aProducts);
                for ($iStep = 1; $iStep <= $iMaxSteps; $iStep++) {
                    $aProducts[] = $aProducts[0];
                }
            }
            return $aProducts;
        }

        /**
         * Get all products.
         *
         * @return array(Product) all products.
         */
        public static function getAll()
        {
            $sQuery = 'select * from product';
            $aProducts = array();
            foreach (DBOperation::getAll($sQuery) as $aProduct) {
                $aProducts[] = self::convertToObject($aProduct);
            }
            return $aProducts;
        }

        public static function create(Product $oProduct)
        {
            $sName = addslashes($oProduct->getName());
            $sDescription = addslashes($oProduct->getDescription());
            $sImage = addslashes($oProduct->getImage());
            $fPrice = floatval($oProduct->getPrice());

            $sQuery = 'insert into product(name,description,image,price) values(';
            $sQuery .= "'$sName','$sDescription','$sImage','$fPrice'";
            $sQuery .= ')';
            $bSuccess = DBOperation::exec($sQuery);
            if (!$bSuccess) {
                return false;
            }

            //  get last id
            $iProductId = DBOperation::getLastId();

            // insert categories
            $aCategories = $oProduct->getCategories();
            if (count($aCategories) > 0) {
                foreach ($aCategories as $oCategory) {
                    $sQuery = 'insert into product_category(product_id,category_id) values(';
                    $sQuery .= "'$iProductId','{$oCategory->getId()}'";
                    $sQuery .= ')';
                    DBOperation::exec($sQuery);
                }
            }

            return true;
        }

    }
